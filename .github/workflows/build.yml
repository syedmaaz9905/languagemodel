name: CI

on:
  workflow_dispatch: # allows manual triggering
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
  push:
    paths: ['.github/workflows/**', 'CMakeLists.txt', 'Makefile', '**.h', '*.c', '**.cpp']
  pull_request:
    types: [opened, synchronize, edited, reopened, review_requested, ready_for_review]
    paths: ['CMakeLists.txt', 'Makefile', '**.h', '*.c', '**.cpp']

env:
 BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  ubuntu-latest:
    runs-on: ubuntu-latest

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v1

      - name: Dependencies
        id: depends
        run: |
          sudo apt-get update
          sudo apt-get install build-essential

      - name: Build
        id: make_build
        run: |
          make

      - name: Zip executables
        run: zip alpaca-linux.zip chat

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: |
            alpaca-linux.zip


  macos-latest:
    runs-on: macOS-latest

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v1

      - name: Dependencies
        id: depends
        run: |
          brew update

      - name: Build
        id: make_build
        run: |
          make chat_mac

      - name: Codesign executable
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        env: 
          MACOS_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PASSWORD }}
          MACOS_CERT_ID: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_ID }}

        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p $KEYCHAIN_PWD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PWD build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PWD build.keychain
          /usr/bin/codesign --options runtime --force -s $MACOS_CERT_ID ./chat_mac -v

      - name: Zip executables
        run: zip alpaca-mac.zip chat_mac

      - name: Notarize executables
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        env: 
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.AC_USERNAME }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.AC_PASSWORD }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
        run: |
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
          xcrun notarytool submit "alpaca-mac.zip" --keychain-profile "notarytool-profile" --wait

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos
          path: |
            alpaca-mac.zip


  windows-latest:
    runs-on: windows-latest

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v1

      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release

      - name: Pack artifacts
        id: pack_artifacts
        run: |
          7z a alpaca-win.zip .\build\Release\*

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: |
            alpaca-win.zip


  release:
    runs-on: ubuntu-latest
    if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
    needs: 
      - windows-latest
      - macos-latest
      - ubuntu-latest

    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Set commit hash variables
        id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Create release
        id: create_release
        uses: zendesk/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.commit.outputs.short }}

      - name: Upload windows release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: windows/alpaca-win.zip
          asset_name: alpaca-win.zip
          asset_content_type: application/octet-stream

      - name: Upload mac release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: macos/alpaca-mac.zip
          asset_name: alpaca-mac.zip
          asset_content_type: application/octet-stream

      - name: Upload linux release
        
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: linux/alpaca-linux.zip
          asset_name: alpaca-linux.zip
          asset_content_type: application/octet-stream
